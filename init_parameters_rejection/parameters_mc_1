#--------------------------------------------------#
#            Data file for HLBFGS_scvt_mpi         #
#--------------------------------------------------#
[HLBFGS]
    memory_number                   = 7         # number of previous iterations stored in memory for limited-memory BFGS
    itr_File                        = mc_0.txt      # file to save iteration info from polar coordinates

    [./real_tol]
        c_1                         = 1e-4      # for Quasi-Newton, function tolerance used in line-search
        c_2                         = 0.99      # for Quasi-Newton, gradient tolerance used in line-search
        f-f_tol                     = 1e-7      # for Quasi-Newton, stopping tolerance ||f^k+1 - f^k||/||f^k||. sugg val: 1e-6 ~ 1e-7
                        # In practice, 1e-6 may still return obtuse triangles/short vor edges. 1e-7 is OK in practice
        g_tol                       = 1e-4      # for Quasi-Newton, stopping tolerance ||g^k||/||f^k||
        dx_tol                      = 1e-4      # sugg val: 1e-3 to 1e-4. for Quasi-Newton, stopping tolerance ||x^k+1 - x^k||_l2
        Lloyd_tol                   = 1.0       # sugg val: 1.0 to 0.1.  tol on ||x^k+1 - x^k||_l2 to cut bwtween Lloyd and Quasi-Newton.
        Lloyd_tolPerc               = 1.0       # sugg val: 0 to 1  perc tol on ||x^k+1 - x^k||_l2 to cut bwtween Lloyd and Quasi-Newton.
                                                # if < 1.0, Lloyd_tol = Lloyd_tolPerc * initial dx_l2
    [../int_tol]
        max_LS                      = 3         # the max number of evaluation in line-search
        invH0_strategy              = 2         # strategy for updating initial inverse Hessian. 0: standard, 1: M1QN3 strategy, 2: Lloyd
        max_itr                     = 500       # the max number of iterations in each single optimization, i.e. without resetting
        max_reset                   = 50        # max num of resetting LBFGS, i.e. setting iter=0 inside LBFGS
        max_restart                 = 10        # max num of restartng Lloyd_LBFGS when bad communication happen and LBFGS return 1.

[Lloyd]
    max_itr                         = 0     # for scvt_Lloyd.exe, the max number of iterations
    dx_tol                          = 1e-4      # for scvt_Lloyd.exe, stopping tolerance ||x^k+1 - x^k||_l2
    eval_f                          = true      # for scvt_Lloyd.exe, evaluate and print f or not in each iteration
    itr_polarFile                   = QN2017042643init.txt     # for scvt_Lloyd.exe, file to save iteration info from polar coordinates
                                                # format: itr dx_l2 f df_polarNorm cumulative_time(f eval not included)
[partition]
    sort_method                     = 1         # values: 0 or 1
                                                # Method to use for sorting point set into regions. 0 - Dot product, 1 - Voronoi sort.
[scvt]
    num_bisections                  = 1         # values: positive integer.  Number of times the point set will be bisected after convergin.
                                                # num_pts: 12 42 162 642 2562 10242 40962 163842 655362 2621442
  bisect_final          = false   # should bisect-then-save final end_points or not. save to bisected_points.dat

    [./initial]
        initial_point_set           = 4         # values: 0, 1, 2, 3, 4, 5, or 6
                                                # 0 - Read from SaveVertices, 1 - Monte Carlo, 2 - Generalized Spiral, 3 - Fibonaci Grid, 4 - Monte Carlo w/ rejection, 5 - Generalized Spiral w/ rejection, 6 - Fibonaci Grid w/ rejection
        number_of_generated_points  = 15000        # values: positive integer

    [../integration]
        quadrature_rule             = 2         # values: 0, 1, 2, 3, 4 or 5.  Quadrature rule to use for triangle integration. Default: 0
                                                # 0 - Circumcenter, 1 - Vertex, 2 - Midpoint, 3 - 7 Point, 4 - 13 Point, 5 - 19 Point.
        division_levs               = 2         # values: positive integer.  One division subdivides a triangle into four triangles.
                                                # Number of subdivisions to perform on a triangle during integration.
        delaunay_triangle_center    = 0         # values: 0 or 1.  0 - Circumcenter, 1 - Barycenter.
                                                # Point to use for the center of Delaunay triangles when dividing for integration.
    [../resolution]
        max_inner_resolution        = 120000.0  # values: positive real number.  Maximum distance between inner cells.
        min_inner_resolution        = 30000.0   # values: positive real number.  Minimum distance between inner cells.
        max_boundary_resolution     = 40000.0   # values: positive real number.  Maximum distance between boundary points.

    [../iterations]                             # this section is not used at this moment
        iterations_per_restart      = 1000      # values: positive integer.  Number of iterations to perform between writing restart files.
        iterations_without_projection=1000      # values: positive integer
                                                # num of iter out of maximum_iterations that will not have a boundary projection applied.
        iterations_with_variable_projection=0   # values: positive integer.  Num of iter to scale boundary projection from off to on over.

[fileIO]
  save_bisect_itrFile       = true    # if true, save all iterations before final bisection to itr_file
    save_before_bisect              = false     # if true, save points to
    file_io_mode                    = 'FILEIO_TXT'          # values: 'FILEIO_TXT' 'FILEIO_NETCDF' 'FILEIO_BOTH'                not used
    restart_file_handling           = 'RESTART_OVERWRITE'   # values: 'RESTART_OVERWRITE'   'RESTART_RETAIN'                    not used

[anneal]                                        # annealing is not used at this moment
    max_annealing_percent           = 0.01      # values: real number between 0 and 1
                                                # Percent to use when performing simulated annealing. Given as a fraction where 1.0 is 100%.
    annealing_frequency             = 0         # values: positive integer
                                                # Number of iterations between simulated annealing applications. 0 means no annealing.
    max_annealing_iterations        = 0         # values: positive integer
                                                # The maximum number of iterations annealing should be allowed to happen on.
    anneal_when_stagnant            = 0         # values: 0, 1, or 2.
                                                # Forces annealing whenever convergence criteria becomes stagnant. 0 - off, 1 - Ave, 2 - Max
    anneal_only_non_hexagons        = 0         # values: 0 or 1
                                                # When performing annealing, 0 - Anneal all cell centers, 1 - anneal non-hexagons.




